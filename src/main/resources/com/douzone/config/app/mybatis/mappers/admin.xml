<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="admin">
	
	<select id="getCompList" parameterType="string" resultType="companyvo">
		select a.comp_seq as compSeq, b.comp_cd as compCd, a.comp_name as compName 
		from t_co_comp_multi a, t_co_comp b
		where a.comp_seq = b.comp_seq
		and lang_code = 'kr'
		order by a.comp_seq + 0;
	</select>
	
	<select id="getCompInfo" parameterType="string" resultType="companyvo">
		select a.comp_seq as compSeq, if(a.use_yn = 'Y', '사용', '미사용') as useYn, a.owner_name as ownerName, a.comp_regist_num as compRegistNum,
			a.comp_num as compNum, a.standard_code as standardCode, a.comp_cd as compCd, a.order_num as orderNum,
			a.biz_condition as bizCondition, a.item, a.tel_num as telNum, a.fax_num as faxNum, a.zip_code as zipCode,
		    a.addr, a.detail_addr as detailAddr, a.homepg_addr as homepgAddr, (case(a.native_lang_code)when'kr' then '한국어' else '영어' end) as nativeLangCode, 
		    a.comp_domain as compDomain, b.comp_name as compName, c.comp_name as compNameEn
		from
			(select a.comp_seq, a.use_yn, b.owner_name, a.comp_regist_num, a.comp_num, a.standard_code,
					a.comp_cd, a.order_num, b.biz_condition, b.item, a.tel_num, a.fax_num, a.zip_code,
			        b.addr, b.detail_addr, a.homepg_addr, a.native_lang_code, a.comp_domain
			from t_co_comp a, t_co_comp_multi b
			where a.comp_seq = b.comp_seq
			and b.lang_code = 'kr'
			and a.comp_seq = #{compSeq}) a
		left outer join t_co_comp_multi b
		on a.comp_seq = b.comp_seq
		and b.lang_code = 'kr'
		left outer join t_co_comp_multi c
		on a.comp_seq = c.comp_seq
		and c.lang_code = 'en'
	</select>
	
	<select id="getBizInfo" parameterType="string" resultType="bizvo">
		select a.biz_seq as bizSeq, a.comp_seq as compSeq, a.order_num as orderNum, if(a.use_yn = 'Y', '사용', '미사용') as useYn,
			 a.zip_code as zipCode, a.biz_name as bizName, a.biz_nickname as bizNickname, a.addr as addr, a.detail_addr as detailAddr, b.biz_name as bizNameEn
		from
			(select a.biz_seq, a.comp_seq, a.order_num, a.use_yn, a.zip_code, b.biz_name, b.biz_nickname, b.addr, b.detail_addr
			from t_co_biz a, t_co_biz_multi b
			where a.biz_seq = b.biz_seq
			and b.lang_code = 'kr'
			and a.biz_seq = #{bizSeq}) a
		left outer join t_co_biz_multi b
		on a.biz_seq = b.biz_seq
		and b.lang_code = 'en';
	</select>
	
	<select id="getDeptInfo" parameterType="string" resultType="departmentsvo">
		select a.dept_seq as deptSeq, a.parent_dept_seq as parentDeptSeq, a.order_num as orderNum, if(a.use_yn = 'Y', '사용', '미사용') as useYn,
			 a.zip_code as zipCode, a.dept_name as deptName, a.dept_nickname as deptNickname, a.addr as addr, a.detail_addr as detailAddr, b.dept_name as deptNameEn
		from
			(select a.dept_seq, a.parent_dept_seq, a.order_num, a.use_yn, a.zip_code, b.dept_name, b.dept_nickname, b.addr, b.detail_addr
			from t_co_dept a, t_co_dept_multi b
			where a.dept_seq = b.dept_seq
			and b.lang_code = 'kr'
			and a.dept_seq = #{deptSeq}) a
		left outer join t_co_dept_multi b
		on a.dept_seq = b.dept_seq
		and b.lang_code = 'en';
	</select>
	
	<!-- 회사정보관리 -->
	<insert id="insertComp" parameterType="companyvo">
		insert into t_co_comp values(#{compSeq}, 'demo', #{compCd}, '0', 'B', #{compRegistNum},
		 #{compNum}, #{standardCode}, 'Y', #{telNum}, #{faxNum}, #{homepgAddr}, null, #{compDomain}, null,
		  '', #{zipCode}, 'N', null, null, #{nativeLangCode}, (select max(a.order_num)+1 from t_co_comp a), #{useYn}, 'eap', '0101', now(),
		   null, null, 'N', 'N', 'N')
	</insert>
	
	<insert id="insertCompMulti" parameterType="companyvo">
		insert into t_co_comp_multi values(#{compSeq}, #{langCode}, 'demo', #{compName}, null,
		 #{ownerName}, null, #{bizCondition}, #{item}, #{addr}, #{detailAddr}, #{useYn}, '1010', now(), null, null, #{compNickname})
	</insert>
	
	<delete id="deleteComp" parameterType="companyvo">
		delete from t_co_comp where comp_seq = #{compSeq}
	</delete>
	
	<delete id="deleteCompMulti" parameterType="companyvo">
		delete from t_co_comp_multi where comp_seq = #{compSeq} and lang_code = #{langCode}
	</delete>
	
	<update id="updateComp" parameterType="companyvo">
		update t_co_comp set comp_cd = #{compCd}, comp_regist_num = #{compRegistNum}, comp_num = #{compNum},
							standard_code = #{standardCode}, tel_num = #{telNum}, fax_num = #{faxNum}, homepg_addr = #{homepgAddr},
							comp_domain = #{compDomain}, zip_code = #{zipCode}, native_lang_code = #{nativeLangCode}, order_num = #{orderNum},
							 use_yn = #{useYn}, modify_seq = '0101', modify_date = now() 
						where comp_seq = #{compSeq}
	</update>
	
	<update id="updateCompMulti" parameterType="companyvo">
		update t_co_comp_multi set comp_name = #{compName}, owner_name = #{ownerName},
								biz_condition = #{bizCondition}, item = #{item}, addr = #{addr}, detail_addr = #{detailAddr},
								use_yn = #{useYn}, modify_seq = '0101', modify_date = now()
							where comp_seq = #{compSeq}
							and lang_code = #{langCode}
	</update>
	
	<insert id="updateCompHistory" parameterType="companyvo">
		insert into t_co_comp_history values( (select max(a.seq)+1 from t_co_comp_history a), 
		<choose>
			<when test="opCode eq 'I'.toString()">
				'I',
			</when>
			<when test="opCode eq 'U'.toString()">
				'U',
			</when>
			<otherwise>
				'D',
			</otherwise>
		</choose>
		 now(), #{groupSeq}, #{compSeq}, null, #{loginType}, #{compRegistNum},
		 #{compNum}, #{standardCode}, #{telNum}, #{faxNum}, #{homepgAddr}, #{compDomain}, #{emailAddr}, #{emailDomain}, #{zipCode}, null, null, #{nativeLangCode}, #{orderNum}, #{useYn},
		  #{eaType}, #{createSeq}, #{createDate}, #{modifySeq}, #{modifyDate}, 'N', 'N', 'N')
	</insert>
	
	<insert id="updateCompMultiHistory" parameterType="companyvo">
		insert into t_co_comp_multi_history values( (select max(a.seq)+1 from t_co_comp_multi_history a), 
		<choose>
			<when test="opCode eq 'I'.toString()">
				'I',
			</when>
			<when test="opCode eq 'U'.toString()">
				'U',
			</when>
			<otherwise>
				'D',
			</otherwise>
		</choose>
		now(), 'demo', #{compSeq}, #{langCode}, #{compName},
		null, #{ownerName}, null, #{bizCondition}, #{item}, #{addr}, #{detailAddr}, #{useYn}, 
		<if test="opCode eq 'I'.toString()">
			'0101', now(),
		</if>
		<if test="opCode neq 'I'.toString()">
			#{createSeq}, #{createDate}, 
		</if>
		#{modifySeq}, #{modifyDate}, null  )
	</insert>
	
	<select id="getCompAll" parameterType="companyvo" resultType="companyvo">
		select comp_seq as compSeq, group_seq as groupSeq, comp_cd as compCd, login_type as loginType, comp_regist_num as compRegistNum,
				comp_num as compNum, standard_code as standardCode, erp_use as erpUse, tel_num as telNum, fax_num as faxNum, homepg_addr as homepg_Addr,
				comp_mail_url as compMailUrl, comp_domain as compDomain, email_addr as emailAddr, email_domain as emailDomain, zip_code as zipCode, 
				sms_use as smsUse, sms_id as smsId, sms_passwd as smsPasswd, native_lang_code as nativeLangCode, order_num as orderNum, use_yn as useYn, 
				ea_type as eaType, create_seq as createSeq, create_date as createDate, modify_seq as modifySeq, modify_date as modifyDate, 
				comp_email_yn as compEmailYn, erp_use_yn as erpUseYn, sms_use_yn as smsUseYn
		from t_co_comp
		where comp_seq = #{compSeq}
	</select>
	
	<select id="getCompMultiAll" parameterType="companyvo" resultType="companyvo">
		select comp_seq as compSeq, lang_code as langCode, group_seq as groupSeq, comp_name as compName, comp_display_name as compDisplayName, 
				owner_name as ownerName, sender_name as senderName, biz_condition as bizCondition, item, addr, detail_addr as detailAddr, 
				use_yn as useYn, create_seq as createSeq, create_date as createDate, modify_seq as modifySeq, modify_date as modifyDate, comp_nickname as compNickname
		from t_co_comp_multi
		where comp_seq = #{compSeq}
		and lang_code = #{langCode}
	</select>
	
	
	<!-- 조직도정보관리 -->
	<update id="updateParentDept" parameterType="map">
		update t_co_dept set parent_dept_seq = #{parentDeptSeq},
		<if test="parentDeptSeq gte 1000000">
			biz_seq = #{parentDeptSeq}
		</if>
		<if test="parentDeptSeq lt 1000000">
			biz_seq = (select * from(select a.biz_seq from t_co_dept a where a.dept_seq = #{parentDeptSeq}) a)
		</if>
		where dept_seq = #{deptSeq}
	</update>
	
	<select id="getDeptForTree" parameterType="string" resultType="departmentsvo">
		select a.dept_seq as deptSeq, a.group_seq as groupSeq, a.comp_seq as compSeq,
	    	 a.biz_seq as bizSeq, a.parent_dept_seq as parentDeptSeq, a.dept_name as deptName, a.dept_level as deptLevel, 
	    	 a.childCount as childCount, a.deptEmpCount as deptEmpCount, c.dept_name as deptNameEn
		from (select a.dept_seq, a.group_seq, a.comp_seq,
		    	 a.biz_seq, a.parent_dept_seq, b.dept_name, a.dept_level, 
		    	 (select count(*) from t_co_dept c where parent_dept_seq = a.dept_seq) as childCount,
		    	 (select count(emp_seq) from t_co_emp_dept where dept_seq = a.dept_seq) as deptEmpCount
			from t_co_dept a, t_co_dept_multi b
			where a.dept_seq = b.dept_seq
			and b.lang_code = 'kr'
			and a.use_yn = 'Y'
			and b.use_yn = 'Y'
			and a.dept_seq = #{seq}) a
		left outer join t_co_dept_multi c
		on a.dept_seq = c.dept_seq
		and c.lang_code = 'en'
		order by substring(a.dept_name, 3) + 0
	</select>
	
	<insert id="insertBiz" parameterType="bizvo">
		insert into t_co_biz values( #{bizSeq}, #{bizSeq}, 'demo', #{compSeq}, null, null, null, null,
					 null, #{zipCode}, null, 'kr', #{orderNum}, #{useYn}, null, '0101', now(), null, null)
	</insert>
	
	<insert id="insertBizMulti" parameterType="bizvo">
		insert into t_co_biz_multi values( #{bizSeq}, #{langCode}, 'demo', #{compSeq}, #{bizName}, null,
			null, null, #{bizNickname}, null, #{addr}, #{detailAddr}, #{useYn}, '0101', now(), null, null)
	</insert>
	
	<insert id="insertDept" parameterType="departmentsvo">
		insert into t_co_dept values( #{deptSeq}, #{deptSeq}, 'demo', #{compSeq},
		<if test="parentDeptSeq gte 10000000">
			#{parentDeptSeq},
		</if>
		<if test="parentDeptSeq lt 10000000">
			(select a.biz_seq from t_co_dept as a where a.dept_seq = #{parentDeptSeq}),
		</if>
		  #{parentDeptSeq}, null, 
			null, null, null, #{zipCode}, null, null, null, 'kr', null, null, 
		<if test="parentDeptSeq gte 10000000">
			1,
		</if>
		<if test="parentDeptSeq lt 10000000">
			(select b.dept_level from t_co_dept as b where b.dept_seq = #{parentDeptSeq})+1,
		</if>
		#{orderNum}, #{useYn}, '0101', now(), null, null, null, 'Y')
	</insert>
	
	<insert id="insertDeptMulti" parameterType="departmentsvo">
		insert into t_co_dept_multi values( #{langCode}, #{deptSeq}, 'demo', #{compSeq},
		<if test="parentDeptSeq gte 10000000">
			#{parentDeptSeq},
		</if>
		<if test="parentDeptSeq lt 10000000">
			(select a.biz_seq from t_co_dept as a where a.dept_seq = #{parentDeptSeq}),
		</if>
		#{deptName}, null, null, #{addr}, #{detailAddr}, null, #{useYn}, '0101', now(), null, null, #{deptNickname})
	</insert>
	
	<update id="updateBiz" parameterType="bizvo">
		update t_co_biz set biz_seq = #{bizSeq}, biz_cd = #{bizCd}, zip_code = #{zipCode}, order_num = #{orderNum},
							use_yn = #{useYn}, modify_seq = '0101', modify_date = now()
						where biz_seq = #{bizSeq}
	</update>
	
	<update id="updateBizMulti" parameterType="bizvo">
		update t_co_biz_multi set biz_seq = #{bizSeq}, biz_name = #{bizName}, biz_nickname = #{bizNickname},
								addr = #{addr}, detail_addr = #{detailAddr}, use_yn = #{useYn}, modify_seq = '0101',
								modify_date = now()
							where biz_seq = #{bizSeq}
	</update>
	
	<insert id="insertBizHistory" parameterType="bizvo">
		insert into t_co_biz_history values( ifnull((select max(a.seq)+1 from t_co_biz_history a), 1) ,
		<choose>
			<when test="opCode eq 'I'.toString()">
				'I',
			</when>
			<when test="opCode eq 'U'.toString()">
				'U',
			</when>
			<otherwise>
				'D',
			</otherwise>
		</choose>
		now(), 'demo', #{compSeq}, #{bizSeq}, #{bizCd}, null, null, null, null, null, #{zipCode}, null, 'kr',
		#{orderNum}, null, #{useYn}, #{createSeq}, #{createDate}, '0101', now())
	</insert>
	
	<insert id="insertBizMultiHistory" parameterType="bizvo">
		insert into t_co_biz_multi_history values( ifnull((select max(a.seq)+1 from t_co_biz_multi_history a), 1) ,
		<choose>
			<when test="opCode eq 'I'.toString()">
				'I',
			</when>
			<when test="opCode eq 'U'.toString()">
				'U',
			</when>
			<otherwise>
				'D',
			</otherwise>
		</choose>
		now(), 'demo', #{compSeq}, #{bizSeq}, #{langCode}, #{bizName}, null, null, null, #{addr}, #{detailAddr}, 
		#{useYn}, #{createSeq}, #{createDate}, '0101', now())
	</insert>
	
	<select id="getBizAll" parameterType="string" resultType="bizvo">
		select group_seq as groupSeq, comp_seq as compSeq, biz_seq as bizSeq, biz_cd as bizCd, zip_code as zipCode,
				native_lang_code as nativeLangCode, order_num as orderNum, use_yn as useYn, create_seq as createSeq,
				create_date as createDate
		from t_co_biz
		where biz_seq = #{bizSeq}
	</select>
	
	<select id="getBizMultiAll" parameterType="bizvo" resultType="bizvo">
		select group_seq as groupSeq, comp_seq as compSeq, biz_seq as bizSeq, lang_code as langCode, 
				use_yn as useYn, biz_name as bizName, addr, detail_addr as detailAddr,  
				create_seq as createSeq, create_date as createDate
		from t_co_biz_multi
		where biz_seq = #{bizSeq}
		and lang_code = #{langCode}
	</select>
	
	<delete id="deleteBiz" parameterType="bizvo">
		delete from t_co_biz where biz_seq = #{bizSeq}
	</delete>
	
	<delete id="deleteBizMulti" parameterType="bizvo">
		delete from t_co_biz_multi where biz_seq = #{bizSeq} and lang_code = #{langCode}
	</delete>
	
	<update id="updateDept" parameterType="departmentsvo">
		update t_co_dept set dept_seq = #{deptSeq}, dept_cd = #{deptCd}, 
		<if test="parentDeptSeq gte 1000000">
			biz_seq = #{parentDeptSeq},
		</if>
		<if test="parentDeptSeq lt 1000000">
			biz_seq = (select * from(select a.biz_seq from t_co_dept a where a.dept_seq = #{parentDeptSeq}) a),
		</if>
			parent_dept_seq = #{parentDeptSeq}, zip_code = #{zipCode}, order_num = #{orderNum}, use_yn = #{useYn},
			modify_seq = '0101', modify_date= now()
		where dept_seq = #{deptSeq}
	</update>
	
	<update id="updateDeptMulti" parameterType="departmentsvo">
		update t_co_dept_multi set dept_seq = #{deptSeq}, 
		<if test="parentDeptSeq gte 1000000">
			biz_seq = #{parentDeptSeq},
		</if>
		<if test="parentDeptSeq lt 1000000">
			biz_seq = (select * from(select a.biz_seq from t_co_dept a where a.dept_seq = #{parentDeptSeq}) a),
		</if>
			dept_name = #{deptName}, addr = #{addr}, detail_addr = #{detailAddr}, use_yn = #{useYn}, 
			modify_seq = '0101', modify_date = now(), dept_nickname = #{deptNickname}
		where dept_seq = #{deptSeq}
		and lang_code = #{langCode}
	</update>
	
	<insert id="insertDeptHistory" parameterType="departmentsvo">
		insert into t_co_dept_history values( ifnull((select max(a.seq)+1 from t_co_dept_history a), 1),
		<choose>
			<when test="opCode eq 'I'.toString()">
				'I',
			</when>
			<when test="opCode eq 'U'.toString()">
				'U',
			</when>
			<otherwise>
				'D',
			</otherwise>
		</choose>
		now(), 'demo', #{compSeq}, #{bizSeq}, #{deptSeq}, #{parentDeptSeq}, null, null, null, #{zipCode}, null,
		null, null, 'kr', null, null, #{deptLevel}, #{orderNum}, #{useYn}, #{createSeq}, #{createDate}, '0101',
		now(), null, null)
	</insert>
	
	<insert id="insertDeptMultiHistory" parameterType="departmentsvo">
		insert into t_co_dept_multi_history values( ifnull((select max(a.seq)+1 from t_co_dept_multi_history a), 1),
		<choose>
			<when test="opCode eq 'I'.toString()">
				'I',
			</when>
			<when test="opCode eq 'U'.toString()">
				'U',
			</when>
			<otherwise>
				'D',
			</otherwise>
		</choose>
		now(), 'demo', #{compSeq}, #{bizSeq}, #{deptSeq}, #{langCode}, #{deptName}, null, null, #{addr}, #{detailAddr},
		null, #{useYn}, '0101', now(), null, null, #{deptNickname})
	</insert>
	
	<select id="getDeptAll" parameterType="departmentsvo" resultType="departmentsvo">
		select group_seq as groupSeq, comp_seq as compSeq, biz_seq as bizSeq, dept_seq as deptSeq, parent_dept_seq as parentDeptSeq,
				zip_code as zipCode, native_lang_code as nativeLangCode, dept_level as deptLevel, order_num as orderNum, use_yn as useYn,
				create_seq as createSeq, create_date as createDate
		from t_co_dept
		where dept_seq = #{deptSeq}
	</select>
	
	<select id="getDeptMultiAll" parameterType="departmentsvo" resultType="departmentsvo">
		select group_seq as groupSeq, comp_seq as compSeq, biz_seq as bizSeq, dept_seq as deptSeq, dept_name as deptName,
			addr, detail_addr as detailAddr, use_yn as useYn, create_seq as createSeq, create_date as createDate, dept_nickname as deptNickname
		from t_co_dept_multi
		where dept_seq = #{deptSeq}
		and lang_code = #{langCode}
	</select>
	
	<delete id="deleteDept" parameterType="departmentsvo">
		delete from t_co_dept where dept_seq = #{deptSeq}
	</delete>

	<delete id="deleteDeptMulti" parameterType="departmentsvo">
		delete from t_co_dept_multi where dept_seq = #{deptSeq} and lang_code = #{langCode}
	</delete>
	
	<select id="compSeqCheck" parameterType="string" resultType="string">
		select comp_seq from t_co_comp where comp_seq = #{seq};	
	</select>
	
	<select id="deptSeqCheck" parameterType="string" resultType="string">
		select dept_seq from t_co_dept where dept_seq = #{seq};	
	</select>
	
	<select id="bizSeqCheck" parameterType="string" resultType="string">
		select biz_seq from t_co_biz where biz_seq = #{seq};	
	</select>
	
	<!-- 인사이동 -->
	<select id="getEmpListByDeptSeq" parameterType="map" resultType="employeesvo">
		select a.emp_seq as empSeq, a.dept_seq as deptSeq, a.emp_name as empName, a.login_id as loginId,
		a.dept_name as deptName, a.dp_name as dutyCodeName, f.dp_name as positionCodeName, a.work_status as workStatus,
			a.dp_seq as dutyCode, f.dp_seq as positionCode
		from(select a.emp_seq, b.dept_seq, c.emp_name, a.login_id, e.dept_name, d.dp_name, a.work_status, b.position_code, d.dp_seq
			from t_co_emp a, t_co_emp_dept b, t_co_emp_multi c, t_co_comp_duty_position_multi d, t_co_dept_multi e
			where a.emp_seq = b.emp_seq
			and a.emp_seq = c.emp_seq
			and b.duty_code = d.dp_seq
			and b.dept_seq = e.dept_seq
			and c.lang_code = 'kr'
			and d.lang_code = 'kr'
			and e.lang_code = 'kr'
			and b.dept_seq = #{deptSeq}) a
		left outer join t_co_comp_duty_position_multi f
		on a.position_code = f.dp_seq
		and f.lang_code = 'kr'
		<if test="sortType eq ''.toString()">
			order by empName
		</if>
		<if test="sortType != ''.toString()">
			order by #{sortType}
		</if>
		
	</select>
	
	<select id="getDutyListByCompSeq" parameterType="string" resultType="dutypositionvo">
		select dp_seq as dpSeq, dp_name as dpName 
		from t_co_comp_duty_position_multi 
		where comp_seq = #{compSeq}
		and dp_type = 'duty' 
		and lang_code = 'kr'
	</select>
	
	<select id="getPositionListByCompSeq" parameterType="string" resultType="dutypositionvo">
		select dp_seq as dpSeq, dp_name as dpName 
		from t_co_comp_duty_position_multi 
		where comp_seq = #{compSeq}
		and dp_type = 'position' 
		and lang_code = 'kr'
	</select>
	
	<update id="updateEmpDept" parameterType="employeedeptinfovo">
		update t_co_emp_dept 
		set duty_code = #{dutyCode}, position_code = #{positionCode}, dept_seq = #{deptSeq},
			biz_seq = (select a.biz_seq from t_co_dept a where a.dept_seq = #{deptSeq})
		where emp_seq = #{empSeq} and dept_seq = #{prevDeptSeq}
	</update>
	
	<insert id="insertEmpDeptHistory" parameterType="employeedeptinfovo">
		insert into t_co_emp_dept_history values( ifnull((select max(a.seq)+1 from t_co_emp_dept_history a), 1),
		<choose>
			<when test="opCode eq 'I'.toString()">
				'I',
			</when>
			<when test="opCode eq 'U'.toString()">
				'U',
			</when>
			<otherwise>
				'D',
			</otherwise>
		</choose>
		now(), #{deptSeq}, #{empSeq}, #{groupSeq}, #{compSeq}, #{bizSeq}, #{mainDeptYn}, #{dutyCode}, #{positionCode},
		#{telNum}, #{faxNum}, #{zipCode}, #{orgchartDisplayYn}, #{messengerDisplayYn}, #{orderNum} , #{useYn}, 
		#{createSeq}, #{createDate}, #{modifySeq}, #{modifyDate})
	</insert>
	
	<select id="getEmpDeptAll" parameterType="employeedeptinfovo" resultType="employeedeptinfovo">
		select dept_seq as deptSeq, emp_seq as empSeq, group_seq as groupSeq, comp_seq as compSeq, biz_seq as bizSeq,
				main_dept_yn as mainDeptYn, duty_code as dutyCode, position_code as positionCode, tel_num as telNum,
				fax_num as faxNum, zip_code as zipCode, orgchart_display_yn as orgchartDisplayYn, messenger_display_yn as messengerDisplayYn,
				order_num as orderNum, order_text as orderText, use_yn as useYn, create_seq as createSeq, create_date as createDate,
				modify_seq as modifySeq, modify_date as modifyDate
		from t_co_emp_dept
		where emp_seq = #{empSeq}
		and dept_seq = #{prevDeptSeq}
	</select>
	
	<update id="updateEmpDeptMulti" parameterType="employeedeptinfovo">
		update t_co_emp_dept_multi 
		set dept_seq = #{deptSeq}, 
			biz_seq = (select a.biz_seq from t_co_dept a where a.dept_seq = #{deptSeq})
		where emp_seq = #{empSeq}
		and dept_seq = #{prevDeptSeq}
	</update>
	
	<insert id="insertEmpDeptMultiHistory" parameterType="employeedeptinfovo">
		insert into t_co_emp_dept_multi_history values(ifnull((select max(a.seq)+1 from t_co_emp_dept_history a), 1),
		<choose>
			<when test="opCode eq 'I'.toString()">
				'I',
			</when>
			<when test="opCode eq 'U'.toString()">
				'U',
			</when>
			<otherwise>
				'D',
			</otherwise>
		</choose>
		now(), #{deptSeq}, #{empSeq}, #{langCode}, #{groupSeq}, #{compSeq}, #{bizSeq}, #{addr}, #{detailAddr}, #{useYn},
		#{createSeq}, #{createDate}, #{modifySeq}, #{modifyDate})
	</insert>
	
	<select id="getEmpDeptMultiAll" parameterType="employeedeptinfovo" resultType="employeedeptinfovo">
		select dept_seq as deptSeq, emp_seq as empSeq, lang_code as langCode, group_seq as groupSeq, comp_seq as compSeq,
				biz_seq as bizSeq, addr, detail_addr as detailAddr, use_yn as useYn, create_seq as createSeq, create_date as createDate,
				modify_seq as modifySeq, modify_date as modifyDate
		from t_co_emp_dept_multi
		where emp_seq = #{empSeq}
		and dept_seq = #{deptSeq}
	</select>
	
	<select id="getParentDeptSeq" parameterType="string" resultType="departmentsvo">
		select parent_dept_seq as parentDeptSeq, biz_seq as bizSeq from t_co_dept where dept_seq = #{deptSeq}
	</select>
</mapper> 